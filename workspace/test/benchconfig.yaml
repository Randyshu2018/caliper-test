#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
test:
    workers:
        type: local
        number: 10
    rounds:
#    - label: init1
#      txNumber: 1000
#      rateControl: { "type": "fixed-feedback-rate","opts": { "unfinished_per_client": 10, "startingTps": 10}}
#      callback: ./callbacks/init.js

    - label: init1
      txNumber: 50000
      rateControl: { type: 'fixed-rate', opts: { tps: 1500 } }
      callback: ./init.js
#    - label: init22
#      txNumber: 1000
#      rateControl: { type: 'fixed-feedback-rate', opts: { tps: 50, unfinished_per_client: 5 } }
#      callback: ./init.js
#    - label: query
#      txNumber: 10000
#      rateControl: { type: 'fixed-rate', opts: { tps: 500 } }
#      callback: ./query.js
observer:
    interval: 1
    type: prometheus
monitor:
    interval: 1
    type: ['prometheus']
#    docker:
#        containers: ['all']
    prometheus:
        url: "http://172.30.20.65:9090"
        push_url: "http://172.30.20.65:9091"
        metrics:
            ignore: [prometheus, pushGateway, cadvisor, grafana, node-exporter, mosquitto]
            include:
#                Endorse Time (s):
#                    query: rate(endorser_proposal_duration_sum{chaincode="fabcar"}[1m])/rate(endorser_proposal_duration_count{chaincode="fabcar"}[1m])
#                    step: 1
#                    label: instance
#                    statistic: avg
                CPU Usage (%):
                    query: 100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[1m])) * 100)
                    step: 1
                    label: instance
                    statistic: avg
#                Memory Usage (%):
#                    query: 100 * (1 - ((avg_over_time(node_memory_MemFree[1m]) + avg_over_time(node_memory_Cached[1m]) + avg_over_time(node_memory_Buffers[1m])) / avg_over_time(node_memory_MemTotal[1m])))
#                    step: 1
#                    label: instance
#                    statistic: avg
        charting:
#            polar:
#                metrics: [none]
            bar:
                metrics: [all]
